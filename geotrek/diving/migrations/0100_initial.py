# Generated by Django 3.2.24 on 2024-03-08 11:23

import colorfield.fields
import django.contrib.gis.db.models.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import geotrek.authent.models
import geotrek.common.mixins.models
import geotrek.zoning.mixins
import mapentity.models


class Migration(migrations.Migration):
    replaces = [
        ("diving", "0001_initial"),
        ("diving", "0002_auto_20200211_1523"),
        ("diving", "0003_auto_20200302_0759"),
        ("diving", "0004_auto_20200228_2153"),
        ("diving", "0005_auto_20200406_1403"),
        ("diving", "0006_auto_20210122_1029"),
        ("diving", "0007_auto_20221118_1421"),
        ("diving", "0008_auto_20230407_0815"),
        ("diving", "0009_alter_practice_color"),
    ]
    initial = True

    dependencies = [
        ("common", "0100_initial"),
        ("authent", "0100_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Difficulty",
            fields=[
                (
                    "pictogram",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                (
                    "id",
                    models.IntegerField(
                        primary_key=True, serialize=False, verbose_name="Order"
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Difficulty level",
                "verbose_name_plural": "Difficulty levels",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Level",
            fields=[
                (
                    "pictogram",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                (
                    "id",
                    models.IntegerField(
                        primary_key=True, serialize=False, verbose_name="Order"
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Complete description",
                        verbose_name="Description",
                    ),
                ),
            ],
            options={
                "verbose_name": "Technical level",
                "verbose_name_plural": "Technical levels",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Practice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "order",
                    models.IntegerField(
                        blank=True,
                        help_text="Alphabetical order if blank",
                        null=True,
                        verbose_name="Order",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#444444",
                        help_text="Color of the practice, only used in mobile.",
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="Color",
                    ),
                ),
            ],
            options={
                "verbose_name": "Practice",
                "verbose_name_plural": "Practices",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Dive",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "deleted",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Deleted"
                    ),
                ),
                (
                    "published",
                    models.BooleanField(
                        default=False,
                        help_text="Visible on Geotrek-rando",
                        verbose_name="Published",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="Publication date",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Public name (Change carefully)",
                        max_length=128,
                        verbose_name="Name",
                    ),
                ),
                (
                    "review",
                    models.BooleanField(
                        default=False, verbose_name="Waiting for publication"
                    ),
                ),
                (
                    "description_teaser",
                    models.TextField(
                        blank=True,
                        help_text="A brief summary",
                        verbose_name="Description teaser",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Complete description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "owner",
                    models.CharField(blank=True, max_length=256, verbose_name="Owner"),
                ),
                (
                    "departure",
                    models.CharField(
                        blank=True, max_length=128, verbose_name="Departure area"
                    ),
                ),
                (
                    "disabled_sport",
                    models.TextField(
                        blank=True, verbose_name="Disabled sport accessibility"
                    ),
                ),
                ("facilities", models.TextField(blank=True, verbose_name="Facilities")),
                (
                    "depth",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="meters",
                        null=True,
                        verbose_name="Maximum depth",
                    ),
                ),
                (
                    "advice",
                    models.TextField(
                        blank=True,
                        help_text="Risks, danger, best period, ...",
                        verbose_name="Advice",
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.GeometryField(
                        srid=settings.SRID, verbose_name="Location"
                    ),
                ),
                (
                    "eid",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="External id",
                    ),
                ),
                (
                    "difficulty",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="dives",
                        to="diving.difficulty",
                        verbose_name="Difficulty level",
                    ),
                ),
                (
                    "levels",
                    models.ManyToManyField(
                        blank=True,
                        related_name="dives",
                        to="diving.Level",
                        verbose_name="Technical levels",
                    ),
                ),
                (
                    "portal",
                    models.ManyToManyField(
                        blank=True,
                        related_name="dives",
                        to="common.TargetPortal",
                        verbose_name="Portal",
                    ),
                ),
                (
                    "practice",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="dives",
                        to="diving.practice",
                        verbose_name="Practice",
                    ),
                ),
                (
                    "source",
                    models.ManyToManyField(
                        blank=True,
                        related_name="dives",
                        to="common.RecordSource",
                        verbose_name="Source",
                    ),
                ),
                (
                    "structure",
                    models.ForeignKey(
                        default=geotrek.authent.models.default_structure_pk,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="authent.structure",
                        verbose_name="Related structure",
                    ),
                ),
                (
                    "themes",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Main theme(s)",
                        related_name="dives",
                        to="common.Theme",
                        verbose_name="Themes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dive",
                "verbose_name_plural": "Dives",
            },
            bases=(
                geotrek.zoning.mixins.ZoningPropertiesMixin,
                geotrek.common.mixins.models.AddPropertyMixin,
                mapentity.models.DuplicateMixin,
                models.Model,
                geotrek.common.mixins.models.PicturesMixin,
            ),
        ),
    ]
