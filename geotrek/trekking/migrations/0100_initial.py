# Generated by Django 3.2.24 on 2024-03-08 11:23

import colorfield.fields
import django.contrib.gis.db.models.fields
import django.core.validators
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import geotrek.authent.models
import geotrek.common.mixins.models
import mapentity.models


class Migration(migrations.Migration):
    replaces = [
        ("trekking", "0001_initial"),
        ("trekking", "0002_trek_pois_excluded"),
        ("trekking", "0003_auto_20181113_1755"),
        ("trekking", "0004_auto_20181127_1551"),
        ("trekking", "0005_auto_20181219_1524"),
        ("trekking", "0006_practice_mobile_color"),
        ("trekking", "0007_auto_20190626_1514"),
        ("trekking", "0008_auto_20190626_1514"),
        ("trekking", "0009_auto_20190809_1146"),
        ("trekking", "0010_auto_20191029_1443"),
        ("trekking", "0011_auto_20191210_0921"),
        ("trekking", "0012_auto_20200211_1011"),
        ("trekking", "0013_auto_20200228_1755"),
        ("trekking", "0014_auto_20200228_2127"),
        ("trekking", "0015_auto_20200406_1412"),
        ("trekking", "0016_auto_20200708_1608"),
        ("trekking", "0017_auto_20200831_1406"),
        ("trekking", "0018_auto_20201012_1411"),
        ("trekking", "0019_move_is_park_centered"),
        ("trekking", "0020_remove_trek_is_park_centered"),
        ("trekking", "0021_auto_20201020_1511"),
        ("trekking", "0022_auto_20201117_1302"),
        ("trekking", "0023_trek_labels2"),
        ("trekking", "0024_copy_labels"),
        ("trekking", "0025_auto_20201215_1602"),
        ("trekking", "0026_auto_20201217_0940"),
        ("trekking", "0027_auto_20210121_0943"),
        ("trekking", "0028_auto_20220110_0918"),
        ("trekking", "0029_trek_equipment"),
        ("trekking", "0030_auto_20220118_1106"),
        ("trekking", "0031_auto_20220119_1016"),
        ("trekking", "0032_auto_20220120_1620"),
        ("trekking", "0033_accessibilityattachment"),
        ("trekking", "0034_delete_accessibilityattachment"),
        ("trekking", "0035_auto_20220203_1625"),
        ("trekking", "0036_auto_20220203_1627"),
        ("trekking", "0037_auto_20220204_1533"),
        ("trekking", "0038_auto_20220204_1537"),
        ("trekking", "0039_move_traduction_disabled_infrastructure_equipment"),
        ("trekking", "0040_remove_translation_equipment_disabled_infrastructure"),
        ("trekking", "0041_auto_20220304_1442"),
        ("trekking", "0042_auto_20220907_1253"),
        ("trekking", "0043_auto_20221110_1128"),
        ("trekking", "0044_auto_20230406_1426"),
        ("trekking", "0045_auto_20230407_0815"),
        ("trekking", "0046_alter_weblink_category"),
        ("trekking", "0047_remove_servicetype_review"),
        ("trekking", "0048_auto_20230927_1709"),
    ]
    initial = True

    dependencies = [
        ("tourism", "0100_initial"),
        ("core", "0100_initial"),
        ("common", "0100_initial"),
        ("authent", "0100_initial"),
        ("cirkwi", "0100_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Accessibility",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "cirkwi",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="cirkwi.cirkwitag",
                        verbose_name="Cirkwi tag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Accessibility",
                "verbose_name_plural": "Accessibilities",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AccessibilityLevel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Accessibility level",
                "verbose_name_plural": "Accessibility levels",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DifficultyLevel",
            fields=[
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                (
                    "difficulty",
                    models.CharField(max_length=128, verbose_name="Difficulty level"),
                ),
                (
                    "cirkwi_level",
                    models.IntegerField(
                        blank=True,
                        help_text="Between 1 and 8",
                        null=True,
                        verbose_name="Cirkwi level",
                    ),
                ),
                (
                    "cirkwi",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="cirkwi.cirkwitag",
                        verbose_name="Cirkwi tag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Difficulty level",
                "verbose_name_plural": "Difficulty levels",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="POI",
            fields=[
                (
                    "published",
                    models.BooleanField(
                        default=False,
                        help_text="Visible on Geotrek-rando",
                        verbose_name="Published",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="Publication date",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Public name (Change carefully)",
                        max_length=128,
                        verbose_name="Name",
                    ),
                ),
                (
                    "review",
                    models.BooleanField(
                        default=False, verbose_name="Waiting for publication"
                    ),
                ),
                (
                    "topo_object",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.topology",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="History, details,  ...",
                        verbose_name="Description",
                    ),
                ),
                (
                    "eid",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="External id",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=1024,
                        verbose_name="Provider",
                    ),
                ),
                (
                    "structure",
                    models.ForeignKey(
                        default=geotrek.authent.models.default_structure_pk,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="authent.structure",
                        verbose_name="Related structure",
                    ),
                ),
            ],
            options={
                "verbose_name": "POI",
                "verbose_name_plural": "POI",
            },
            bases=(
                geotrek.common.mixins.models.PicturesMixin,
                mapentity.models.DuplicateMixin,
                "core.topology",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Practice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "distance",
                    models.IntegerField(
                        blank=True,
                        help_text="Touristic contents and events will associate within this distance (meters)",
                        null=True,
                        verbose_name="Distance",
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        blank=True,
                        help_text="Alphabetical order if blank",
                        null=True,
                        verbose_name="Order",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#444444",
                        help_text="Color of the practice, only used in mobile.",
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="Color",
                    ),
                ),
                (
                    "cirkwi",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="cirkwi.cirkwilocomotion",
                        verbose_name="Cirkwi locomotion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Practice",
                "verbose_name_plural": "Practices",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Rating",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "order",
                    models.IntegerField(
                        blank=True,
                        help_text="Alphabetical order if blank",
                        null=True,
                        verbose_name="Order",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        blank=True,
                        default="",
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="Color",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rating",
                "verbose_name_plural": "Ratings",
                "ordering": ("order", "name"),
            },
        ),
        migrations.CreateModel(
            name="Route",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("route", models.CharField(max_length=128, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Route",
                "verbose_name_plural": "Routes",
                "ordering": ["route"],
            },
        ),
        migrations.CreateModel(
            name="Trek",
            fields=[
                (
                    "published",
                    models.BooleanField(
                        default=False,
                        help_text="Visible on Geotrek-rando",
                        verbose_name="Published",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="Publication date",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Public name (Change carefully)",
                        max_length=128,
                        verbose_name="Name",
                    ),
                ),
                (
                    "review",
                    models.BooleanField(
                        default=False, verbose_name="Waiting for publication"
                    ),
                ),
                (
                    "topo_object",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.topology",
                    ),
                ),
                (
                    "departure",
                    models.CharField(
                        blank=True,
                        help_text="Departure description",
                        max_length=128,
                        verbose_name="Departure",
                    ),
                ),
                (
                    "arrival",
                    models.CharField(
                        blank=True,
                        help_text="Arrival description",
                        max_length=128,
                        verbose_name="Arrival",
                    ),
                ),
                (
                    "description_teaser",
                    models.TextField(
                        blank=True,
                        help_text="A brief summary (map pop-ups)",
                        verbose_name="Description teaser",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Complete description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "ambiance",
                    models.TextField(
                        blank=True,
                        help_text="Main attraction and interest",
                        verbose_name="Ambiance",
                    ),
                ),
                (
                    "access",
                    models.TextField(
                        blank=True, help_text="Best way to go", verbose_name="Access"
                    ),
                ),
                (
                    "duration",
                    models.FloatField(
                        blank=True,
                        help_text="In hours (1.5 = 1 h 30, 24 = 1 day, 48 = 2 days)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Duration",
                    ),
                ),
                (
                    "advised_parking",
                    models.CharField(
                        blank=True,
                        help_text="Where to park",
                        max_length=128,
                        verbose_name="Advised parking",
                    ),
                ),
                (
                    "parking_location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True,
                        null=True,
                        spatial_index=False,
                        srid=settings.SRID,
                        verbose_name="Parking location",
                    ),
                ),
                (
                    "public_transport",
                    models.TextField(
                        blank=True,
                        help_text="Train, bus (see web links)",
                        verbose_name="Public transport",
                    ),
                ),
                (
                    "advice",
                    models.TextField(
                        blank=True,
                        help_text="Risks, danger, best period, ...",
                        verbose_name="Advice",
                    ),
                ),
                (
                    "ratings_description",
                    models.TextField(blank=True, verbose_name="Ratings description"),
                ),
                (
                    "gear",
                    models.TextField(
                        blank=True,
                        help_text="Gear needed, adviced ...",
                        verbose_name="Gear",
                    ),
                ),
                (
                    "accessibility_advice",
                    models.TextField(
                        blank=True,
                        help_text="Specific elements allowing to appreciate the context of the itinerary for PRMs (advice, delicate passages, etc.)",
                        verbose_name="Accessibility advice",
                    ),
                ),
                (
                    "accessibility_covering",
                    models.TextField(
                        blank=True,
                        help_text="Description of the surfaces encountered on the entire route. Track, path, road + type of surface (stony, presence of stones, sand, paving, slab...)",
                        verbose_name="Accessibility covering",
                    ),
                ),
                (
                    "accessibility_exposure",
                    models.TextField(
                        blank=True,
                        help_text="Description of exposures and shaded areas. Shaded, High exposure, Presence of shaded areas",
                        verbose_name="Accessibility exposure",
                    ),
                ),
                (
                    "accessibility_infrastructure",
                    models.TextField(
                        blank=True,
                        help_text="Any specific accessibility infrastructure",
                        verbose_name="Accessibility infrastructure",
                    ),
                ),
                (
                    "accessibility_signage",
                    models.TextField(
                        blank=True,
                        help_text="Description of the size, shape and colors of signages.",
                        verbose_name="Accessibility signage",
                    ),
                ),
                (
                    "accessibility_slope",
                    models.TextField(
                        blank=True,
                        help_text="Description of the slope: greater than 10% (Requires assistance when the slope is greater than 8%); slope break",
                        verbose_name="Accessibility slope",
                    ),
                ),
                (
                    "accessibility_width",
                    models.TextField(
                        blank=True,
                        help_text="Description of the narrowing of the trails and the minimum width for wheelchairs (Trail>0.90 m, Joëlette, Narrow trail requiring strong driving technique)",
                        verbose_name="Accessibility width",
                    ),
                ),
                (
                    "points_reference",
                    django.contrib.gis.db.models.fields.MultiPointField(
                        blank=True,
                        null=True,
                        spatial_index=False,
                        srid=settings.SRID,
                        verbose_name="Points of reference",
                    ),
                ),
                (
                    "eid",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="External id",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=1024,
                        verbose_name="Provider",
                    ),
                ),
                (
                    "eid2",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="Second external id",
                    ),
                ),
                (
                    "reservation_id",
                    models.CharField(
                        blank=True, max_length=1024, verbose_name="Reservation ID"
                    ),
                ),
                (
                    "accessibilities",
                    models.ManyToManyField(
                        blank=True,
                        related_name="treks",
                        to="trekking.Accessibility",
                        verbose_name="Accessibility type",
                    ),
                ),
                (
                    "accessibility_level",
                    models.ForeignKey(
                        blank=True,
                        help_text="Beginner (Little drop – terrain without difficulties) / Experienced (Significant slope – Technical terrain, with obstacles)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="treks",
                        to="trekking.accessibilitylevel",
                        verbose_name="Level accessibility",
                    ),
                ),
                (
                    "difficulty",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="treks",
                        to="trekking.difficultylevel",
                        verbose_name="Difficulty",
                    ),
                ),
                (
                    "information_desks",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Where to obtain information",
                        related_name="treks",
                        to="tourism.InformationDesk",
                        verbose_name="Information desks",
                    ),
                ),
                (
                    "labels",
                    models.ManyToManyField(
                        blank=True,
                        related_name="treks",
                        to="common.Label",
                        verbose_name="Labels",
                    ),
                ),
            ],
            options={
                "verbose_name": "Trek",
                "verbose_name_plural": "Treks",
                "ordering": ("name",),
            },
            bases=(
                "core.topology",
                geotrek.common.mixins.models.PicturesMixin,
                mapentity.models.DuplicateMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="TrekNetwork",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("network", models.CharField(max_length=128, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Trek network",
                "verbose_name_plural": "Trek networks",
                "ordering": ["network"],
            },
        ),
        migrations.CreateModel(
            name="WebLinkCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("label", models.CharField(max_length=128, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Web link category",
                "verbose_name_plural": "Web link categories",
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="WebLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                ("url", models.URLField(max_length=2048, verbose_name="URL")),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="links",
                        to="trekking.weblinkcategory",
                        verbose_name="Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Web link",
                "verbose_name_plural": "Web links",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TrekRelationship",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "has_common_departure",
                    models.BooleanField(default=False, verbose_name="Common departure"),
                ),
                (
                    "has_common_edge",
                    models.BooleanField(default=False, verbose_name="Common edge"),
                ),
                (
                    "is_circuit_step",
                    models.BooleanField(default=False, verbose_name="Circuit step"),
                ),
                (
                    "trek_a",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trek_relationship_a",
                        to="trekking.trek",
                    ),
                ),
                (
                    "trek_b",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trek_relationship_b",
                        to="trekking.trek",
                        verbose_name="Trek",
                    ),
                ),
            ],
            options={
                "verbose_name": "Trek relationship",
                "verbose_name_plural": "Trek relationships",
                "unique_together": {("trek_a", "trek_b")},
            },
        ),
        migrations.AddField(
            model_name="trek",
            name="networks",
            field=models.ManyToManyField(
                blank=True,
                help_text="Hiking networks",
                related_name="treks",
                to="trekking.TrekNetwork",
                verbose_name="Networks",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="pois_excluded",
            field=models.ManyToManyField(
                blank=True,
                related_name="excluded_treks",
                to="trekking.POI",
                verbose_name="Excluded POIs",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="portal",
            field=models.ManyToManyField(
                blank=True,
                related_name="treks",
                to="common.TargetPortal",
                verbose_name="Portal",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="practice",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="treks",
                to="trekking.practice",
                verbose_name="Practice",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="ratings",
            field=models.ManyToManyField(
                blank=True,
                related_name="treks",
                to="trekking.Rating",
                verbose_name="Ratings",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="related_treks",
            field=models.ManyToManyField(
                help_text="Connections between treks",
                related_name="_trekking_trek_related_treks_+",
                through="trekking.TrekRelationship",
                to="trekking.Trek",
                verbose_name="Related treks",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="reservation_system",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="common.reservationsystem",
                verbose_name="Reservation system",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="route",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="treks",
                to="trekking.route",
                verbose_name="Route",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="source",
            field=models.ManyToManyField(
                blank=True,
                related_name="treks",
                to="common.RecordSource",
                verbose_name="Source",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="structure",
            field=models.ForeignKey(
                default=geotrek.authent.models.default_structure_pk,
                on_delete=django.db.models.deletion.PROTECT,
                to="authent.structure",
                verbose_name="Related structure",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="themes",
            field=models.ManyToManyField(
                blank=True,
                help_text="Main theme(s)",
                related_name="treks",
                to="common.Theme",
                verbose_name="Themes",
            ),
        ),
        migrations.AddField(
            model_name="trek",
            name="web_links",
            field=models.ManyToManyField(
                blank=True,
                help_text="External resources",
                related_name="treks",
                to="trekking.WebLink",
                verbose_name="Web links",
            ),
        ),
        migrations.CreateModel(
            name="ServiceType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "published",
                    models.BooleanField(
                        default=False,
                        help_text="Visible on Geotrek-rando",
                        verbose_name="Published",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="Publication date",
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Public name (Change carefully)",
                        max_length=128,
                        verbose_name="Name",
                    ),
                ),
                (
                    "practices",
                    models.ManyToManyField(
                        blank=True,
                        related_name="services",
                        to="trekking.Practice",
                        verbose_name="Practices",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service type",
                "verbose_name_plural": "Service types",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "topo_object",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.topology",
                    ),
                ),
                (
                    "eid",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="External id",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=1024,
                        verbose_name="Provider",
                    ),
                ),
                (
                    "structure",
                    models.ForeignKey(
                        default=geotrek.authent.models.default_structure_pk,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="authent.structure",
                        verbose_name="Related structure",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="services",
                        to="trekking.servicetype",
                        verbose_name="Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service",
                "verbose_name_plural": "Services",
            },
            bases=(mapentity.models.DuplicateMixin, "core.topology", models.Model),
        ),
        migrations.CreateModel(
            name="RatingScale",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "order",
                    models.IntegerField(
                        blank=True,
                        help_text="Within a practice. Alphabetical order if blank",
                        null=True,
                        verbose_name="Order",
                    ),
                ),
                (
                    "practice",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rating_scales",
                        to="trekking.practice",
                        verbose_name="Practice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rating scale",
                "verbose_name_plural": "Rating scales",
                "ordering": ("practice", "order", "name"),
            },
        ),
        migrations.AddField(
            model_name="rating",
            name="scale",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ratings",
                to="trekking.ratingscale",
                verbose_name="Scale",
            ),
        ),
        migrations.CreateModel(
            name="POIType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("label", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "cirkwi",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="cirkwi.cirkwipoicategory",
                        verbose_name="Cirkwi POI category",
                    ),
                ),
            ],
            options={
                "verbose_name": "POI type",
                "verbose_name_plural": "POI types",
                "ordering": ["label"],
            },
        ),
        migrations.AddField(
            model_name="poi",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="pois",
                to="trekking.poitype",
                verbose_name="Type",
            ),
        ),
        migrations.CreateModel(
            name="OrderedTrekChild",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "child",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trek_parents",
                        to="trekking.trek",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trek_children",
                        to="trekking.trek",
                    ),
                ),
            ],
            options={
                "ordering": ("parent__id", "order"),
                "unique_together": {("parent", "child")},
            },
        ),
    ]
