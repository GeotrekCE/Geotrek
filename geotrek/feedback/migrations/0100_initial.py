# Generated by Django 3.2.24 on 2024-03-08 11:23

import colorfield.fields
import django.contrib.gis.db.models.fields
from django.conf import settings
from django.db import migrations, models
import django.utils.timezone
import geotrek.common.mixins.models
import geotrek.zoning.mixins
import mapentity.models
import uuid


class Migration(migrations.Migration):
    replaces = [
        ("feedback", "0001_initial"),
        ("feedback", "0002_auto_20190306_1417"),
        ("feedback", "0003_auto_20200211_1011"),
        ("feedback", "0004_auto_20200228_1755"),
        ("feedback", "0005_remove_report_name"),
        ("feedback", "0006_auto_20200406_1408"),
        ("feedback", "0007_auto_20200407_0728"),
        ("feedback", "0008_auto_20200526_1419"),
        ("feedback", "0009_auto_20200708_1455"),
        ("feedback", "0010_report_related_trek"),
        ("feedback", "0011_auto_20201012_1500"),
        ("feedback", "0012_auto_20201117_1302"),
        ("feedback", "0013_auto_20210121_0943"),
        ("feedback", "0014_auto_20210825_1130"),
        ("feedback", "0015_reportproblemmagnitude_suricate_label"),
        ("feedback", "0016_auto_20211221_1507_squashed_0028_auto_20220316_0951"),
        ("feedback", "0029_auto_20220324_0944"),
        ("feedback", "0030_auto_20220324_0947"),
        ("feedback", "0031_report_eid"),
        ("feedback", "0032_auto_20220328_0931"),
        ("feedback", "0033_auto_20220328_0931"),
        ("feedback", "0034_workflowdistrict"),
        ("feedback", "0035_reportstatus_display_in_legend"),
        ("feedback", "0036_reportstatus_timer_days"),
        ("feedback", "0037_auto_20221110_1128"),
        ("feedback", "0038_alter_report_related_trek"),
        ("feedback", "0039_auto_20230407_0815"),
        ("feedback", "0040_alter_reportstatus_color"),
        ("feedback", "0041_alter_pendingemail_recipient"),
    ]
    initial = True

    dependencies = [
        ("trekking", "0100_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("zoning", "0103_alter_restrictedarea_area_type"),
    ]

    operations = [
        migrations.CreateModel(
            name="PendingSuricateAPIRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "request_type",
                    models.CharField(
                        choices=[("GET", "Get Request"), ("POST", "Post Request")],
                        max_length=4,
                    ),
                ),
                (
                    "api",
                    models.CharField(
                        choices=[("STA", "Standard API"), ("MAN", "Management API")],
                        max_length=3,
                    ),
                ),
                ("endpoint", models.CharField(max_length=40)),
                ("params", models.JSONField(max_length=300)),
                ("error_message", models.TextField()),
                ("retries", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="PredefinedEmail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "label",
                    models.CharField(max_length=500, verbose_name="Predefined email"),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True, help_text="Mail body", verbose_name="Content"
                    ),
                ),
            ],
            options={
                "verbose_name": "Predefined email",
                "verbose_name_plural": "Predefined emails",
            },
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "deleted",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Deleted"
                    ),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                (
                    "comment",
                    models.TextField(blank=True, default="", verbose_name="Comment"),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True,
                        default=None,
                        null=True,
                        srid=settings.SRID,
                        verbose_name="Location",
                    ),
                ),
                (
                    "created_in_suricate",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Creation date in Suricate"
                    ),
                ),
                (
                    "external_uuid",
                    models.UUIDField(
                        editable=False,
                        null=True,
                        unique=True,
                        verbose_name="Identifier",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "eid",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=1024,
                        verbose_name="External id",
                    ),
                ),
                ("locked", models.BooleanField(default=False, verbose_name="Locked")),
                (
                    "origin",
                    models.CharField(
                        blank=True,
                        default="unknown",
                        max_length=100,
                        null=True,
                        verbose_name="Origin",
                    ),
                ),
                (
                    "last_updated_in_suricate",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last updated in Suricate"
                    ),
                ),
                (
                    "uses_timers",
                    models.BooleanField(
                        default=False,
                        help_text="Launch timers to alert supervisor if report is not being treated on time",
                        verbose_name="Use timers",
                    ),
                ),
                (
                    "sync_errors",
                    models.IntegerField(
                        default=0,
                        help_text="Synchronisation with Suricate is currently pending due to connection problems",
                        verbose_name="Synchronisation error",
                    ),
                ),
                (
                    "mail_errors",
                    models.IntegerField(
                        default=0,
                        help_text="A notification email could not be sent. Please contact an administrator",
                        verbose_name="Mail error",
                    ),
                ),
            ],
            options={
                "verbose_name": "Report",
                "verbose_name_plural": "Reports",
                "ordering": ["-date_insert"],
            },
            bases=(
                mapentity.models.DuplicateMixin,
                geotrek.common.mixins.models.PicturesMixin,
                models.Model,
                geotrek.common.mixins.models.AddPropertyMixin,
                geotrek.zoning.mixins.ZoningPropertiesMixin,
            ),
        ),
        migrations.CreateModel(
            name="ReportActivity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("label", models.CharField(max_length=128, verbose_name="Activity")),
                (
                    "identifier",
                    models.PositiveIntegerField(
                        blank=True, null=True, unique=True, verbose_name="Suricate id"
                    ),
                ),
            ],
            options={
                "verbose_name": "Activity",
                "verbose_name_plural": "Activities",
                "ordering": ("label",),
            },
        ),
        migrations.CreateModel(
            name="ReportCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("label", models.CharField(max_length=128, verbose_name="Category")),
                (
                    "identifier",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Suricate id"
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "ordering": ("label",),
            },
        ),
        migrations.CreateModel(
            name="ReportProblemMagnitude",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "label",
                    models.CharField(max_length=128, verbose_name="Problem magnitude"),
                ),
                (
                    "identifier",
                    models.PositiveIntegerField(
                        blank=True, null=True, unique=True, verbose_name="Suricate id"
                    ),
                ),
                (
                    "suricate_label",
                    models.CharField(
                        blank=True,
                        max_length=128,
                        null=True,
                        unique=True,
                        verbose_name="Suricate label",
                    ),
                ),
            ],
            options={
                "verbose_name": "Problem magnitude",
                "verbose_name_plural": "Problem magnitudes",
                "ordering": ("id",),
            },
        ),
        migrations.CreateModel(
            name="ReportStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("label", models.CharField(max_length=128, verbose_name="Status")),
                (
                    "identifier",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="Identifiant",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#444444",
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="Color",
                    ),
                ),
                (
                    "display_in_legend",
                    models.BooleanField(
                        default=True,
                        help_text="Whether or not this status should be displayed in legend",
                        verbose_name="Display in legend",
                    ),
                ),
                (
                    "timer_days",
                    models.IntegerField(
                        default=0,
                        help_text="How many days to wait before sending an email alert to the assigned user for a report that has this status and enabled timers. 0 days disables the alerts",
                        verbose_name="Timer days",
                    ),
                ),
            ],
            options={
                "verbose_name": "Status",
                "verbose_name_plural": "Status",
            },
        ),
        migrations.CreateModel(
            name="SelectableUser",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.user",),
        ),
        migrations.CreateModel(
            name="WorkflowManager",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="feedback.selectableuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "Workflow Manager",
                "verbose_name_plural": "Workflow Managers",
            },
        ),
        migrations.CreateModel(
            name="WorkflowDistrict",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "district",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="zoning.district",
                    ),
                ),
            ],
            options={
                "verbose_name": "Workflow District",
                "verbose_name_plural": "Workflow Districts",
            },
        ),
        migrations.CreateModel(
            name="TimerEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_event", models.DateTimeField(default=django.utils.timezone.now)),
                ("deadline", models.DateTimeField()),
                ("notification_sent", models.BooleanField(default=False)),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timers",
                        to="feedback.report",
                    ),
                ),
                (
                    "step",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timers",
                        to="feedback.reportstatus",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="report",
            name="activity",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="feedback.reportactivity",
                verbose_name="Activity",
            ),
        ),
        migrations.AddField(
            model_name="report",
            name="assigned_user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="reports",
                to="feedback.selectableuser",
                verbose_name="Supervisor",
            ),
        ),
        migrations.AddField(
            model_name="report",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="feedback.reportcategory",
                verbose_name="Category",
            ),
        ),
        migrations.AddField(
            model_name="report",
            name="problem_magnitude",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="feedback.reportproblemmagnitude",
                verbose_name="Problem magnitude",
            ),
        ),
        migrations.AddField(
            model_name="report",
            name="related_trek",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="trekking.trek",
                verbose_name="Related trek",
            ),
        ),
        migrations.AddField(
            model_name="report",
            name="status",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="feedback.reportstatus",
                verbose_name="Status",
            ),
        ),
        migrations.CreateModel(
            name="PendingEmail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "recipient",
                    models.EmailField(
                        blank=True, max_length=256, null=True, verbose_name="Recipient"
                    ),
                ),
                ("subject", models.CharField(max_length=200)),
                ("message", models.TextField(verbose_name="Message")),
                ("error_message", models.TextField()),
                ("retries", models.IntegerField(default=0)),
                (
                    "report",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="feedback.report",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AttachedMessage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField()),
                ("author", models.CharField(max_length=300)),
                ("content", models.TextField()),
                (
                    "identifier",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Identifiant"
                    ),
                ),
                ("type", models.CharField(max_length=100)),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="feedback.report",
                    ),
                ),
            ],
            options={
                "unique_together": {("identifier", "date", "report")},
            },
        ),
    ]
