# Generated by Django 3.2.24 on 2024-03-08 11:23

import colorfield.fields
import django.contrib.gis.db.models.fields
import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import geotrek.authent.models
import geotrek.common.mixins.models
import geotrek.zoning.mixins
import mapentity.models
import uuid


class Migration(migrations.Migration):
    replaces = [
        ("tourism", "0001_initial"),
        ("tourism", "0002_auto_20181219_1524"),
        ("tourism", "0003_auto_20190306_1417"),
        ("tourism", "0004_auto_20190322_1908"),
        ("tourism", "0005_auto_20190328_1339"),
        ("tourism", "0006_touristiccontentcategory_color"),
        ("tourism", "0007_auto_20190809_1146"),
        ("tourism", "0008_auto_20200211_1011"),
        ("tourism", "0009_auto_20200228_1755"),
        ("tourism", "0010_auto_20200228_2152"),
        ("tourism", "0011_auto_20200406_1411"),
        ("tourism", "0012_auto_20200708_1448"),
        ("tourism", "0013_auto_20200831_1406"),
        ("tourism", "0014_auto_20201117_1302"),
        ("tourism", "0015_auto_20210121_0943"),
        ("tourism", "0016_auto_20211022_1251"),
        ("tourism", "0017_auto_20211022_1255"),
        ("tourism", "0018_auto_20211022_1255"),
        ("tourism", "0019_auto_20220127_1019"),
        ("tourism", "0020_auto_20220202_0900"),
        ("tourism", "0021_auto_20220203_1625"),
        ("tourism", "0022_informationdesk_eid"),
        ("tourism", "0023_informationdesk_uuid"),
        ("tourism", "0024_auto_20220726_0901"),
        ("tourism", "0025_auto_20220726_0903"),
        ("tourism", "0026_auto_20220907_1400"),
        ("tourism", "0027_touristicevent_bookable"),
        ("tourism", "0028_auto_20220927_0814"),
        ("tourism", "0029_auto_20220927_0901"),
        ("tourism", "0030_auto_20220928_1433"),
        ("tourism", "0031_auto_20220927_1005"),
        ("tourism", "0032_auto_20220928_1526"),
        ("tourism", "0033_auto_20220929_0840"),
        ("tourism", "0034_touristicevent_participants"),
        ("tourism", "0035_auto_20221003_0946"),
        ("tourism", "0036_remove_touristicevent_participant_number"),
        ("tourism", "0037_auto_20221004_0951"),
        ("tourism", "0038_auto_20221107_0939"),
        ("tourism", "0039_auto_20221110_1128"),
        ("tourism", "0040_auto_20230407_0947"),
        ("tourism", "0041_alter_touristiceventparticipantcount_category"),
        ("tourism", "0042_alter_informationdesk_type"),
        ("tourism", "0043_auto_20230804_1317"),
        ("tourism", "0044_deplace_organizer_to_model"),
        ("tourism", "0045_remove_old_organizer"),
        ("tourism", "0046_rename_organizer_temp_touristicevent_organizer"),
        ("tourism", "0047_auto_20230824_1635"),
        ("tourism", "0048_alter_touristiceventorganizer_label"),
        ("tourism", "0049_alter_touristiccontentcategory_color"),
        ("tourism", "0050_alter_touristiceventorganizer_label"),
        ("tourism", "0050_auto_20231220_0952"),
        ("tourism", "0050_touristicevent_price"),
        ("tourism", "0051_merge_20240229_1225"),
        ("tourism", "0052_merge_20240229_1527"),
    ]
    initial = True

    dependencies = [
        ("common", "0100_initial"),
        ("authent", "0100_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CancellationReason",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("label", models.CharField(max_length=128, verbose_name="Label")),
            ],
            options={
                "verbose_name": "Cancellation reason",
                "verbose_name_plural": "Cancellation reasons",
            },
        ),
        migrations.CreateModel(
            name="InformationDeskType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("label", models.CharField(max_length=128, verbose_name="Label")),
            ],
            options={
                "verbose_name": "Information desk type",
                "verbose_name_plural": "Information desk types",
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="LabelAccessibility",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("label", models.CharField(max_length=128, verbose_name="Label")),
            ],
            options={
                "verbose_name": "Label accessibility",
                "verbose_name_plural": "Labels accessibility",
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="TouristicContentCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("label", models.CharField(max_length=128, verbose_name="Label")),
                (
                    "geometry_type",
                    models.CharField(
                        choices=[
                            ("point", "Point"),
                            ("line", "Line"),
                            ("polygon", "Polygon"),
                            ("any", "Any"),
                        ],
                        default="point",
                        max_length=16,
                    ),
                ),
                (
                    "type1_label",
                    models.CharField(
                        blank=True, max_length=128, verbose_name="First list label"
                    ),
                ),
                (
                    "type2_label",
                    models.CharField(
                        blank=True, max_length=128, verbose_name="Second list label"
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        blank=True,
                        help_text="Alphabetical order if blank",
                        null=True,
                        verbose_name="Order",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#444444",
                        help_text="Color of the category, only used in mobile.",
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="Color",
                    ),
                ),
            ],
            options={
                "verbose_name": "Touristic content category",
                "verbose_name_plural": "Touristic content categories",
                "ordering": ["order", "label"],
            },
        ),
        migrations.CreateModel(
            name="TouristicEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "deleted",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Deleted"
                    ),
                ),
                (
                    "published",
                    models.BooleanField(
                        default=False,
                        help_text="Visible on Geotrek-rando",
                        verbose_name="Published",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="Publication date",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Public name (Change carefully)",
                        max_length=128,
                        verbose_name="Name",
                    ),
                ),
                (
                    "review",
                    models.BooleanField(
                        default=False, verbose_name="Waiting for publication"
                    ),
                ),
                (
                    "description_teaser",
                    models.TextField(
                        blank=True,
                        help_text="A brief summary",
                        verbose_name="Description teaser",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Complete description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.PointField(
                        srid=settings.SRID, verbose_name="Location"
                    ),
                ),
                ("begin_date", models.DateField(verbose_name="Begin date")),
                (
                    "end_date",
                    models.DateField(blank=True, null=True, verbose_name="End date"),
                ),
                (
                    "duration",
                    models.CharField(
                        blank=True,
                        help_text="3 days, season, ...",
                        max_length=64,
                        verbose_name="Duration",
                    ),
                ),
                (
                    "meeting_point",
                    models.CharField(
                        blank=True,
                        help_text="Where exactly ?",
                        max_length=256,
                        verbose_name="Meeting point",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        blank=True,
                        help_text="11:00, 23:30",
                        null=True,
                        verbose_name="Start time",
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        blank=True,
                        help_text="11:00, 23:30",
                        null=True,
                        verbose_name="End time",
                    ),
                ),
                ("contact", models.TextField(blank=True, verbose_name="Contact")),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=256, null=True, verbose_name="Email"
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True, max_length=256, null=True, verbose_name="Website"
                    ),
                ),
                (
                    "speaker",
                    models.CharField(
                        blank=True, max_length=256, verbose_name="Speaker"
                    ),
                ),
                (
                    "accessibility",
                    models.TextField(blank=True, verbose_name="Accessibility"),
                ),
                (
                    "capacity",
                    models.IntegerField(blank=True, null=True, verbose_name="Capacity"),
                ),
                ("booking", models.TextField(blank=True, verbose_name="Booking")),
                (
                    "target_audience",
                    models.CharField(
                        blank=True,
                        max_length=128,
                        null=True,
                        verbose_name="Target audience",
                    ),
                ),
                (
                    "practical_info",
                    models.TextField(
                        blank=True,
                        help_text="Recommandations / To plan / Advices",
                        verbose_name="Practical info",
                    ),
                ),
                (
                    "eid",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="External id",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=1024,
                        verbose_name="Provider",
                    ),
                ),
                (
                    "approved",
                    models.BooleanField(default=False, verbose_name="Approved"),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "bookable",
                    models.BooleanField(default=False, verbose_name="Bookable"),
                ),
                (
                    "cancelled",
                    models.BooleanField(
                        default=False,
                        help_text="Boolean indicating if Event is cancelled",
                        verbose_name="Cancelled",
                    ),
                ),
                (
                    "preparation_duration",
                    models.FloatField(
                        blank=True,
                        help_text="In hours (1.5 = 1 h 30, 24 = 1 day, 48 = 2 days)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Preparation duration",
                    ),
                ),
                (
                    "intervention_duration",
                    models.FloatField(
                        blank=True,
                        help_text="In hours (1.5 = 1 h 30, 24 = 1 day, 48 = 2 days)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Intervention duration",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="0 mean free",
                        max_digits=8,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Price",
                    ),
                ),
                (
                    "cancellation_reason",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="touristic_events",
                        to="tourism.cancellationreason",
                        verbose_name="Cancellation reason",
                    ),
                ),
            ],
            options={
                "verbose_name": "Touristic event",
                "verbose_name_plural": "Touristic events",
                "ordering": ["-begin_date"],
            },
            bases=(
                geotrek.zoning.mixins.ZoningPropertiesMixin,
                geotrek.common.mixins.models.AddPropertyMixin,
                mapentity.models.DuplicateMixin,
                geotrek.common.mixins.models.PicturesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="TouristicEventOrganizer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("label", models.CharField(max_length=256, verbose_name="Label")),
            ],
            options={
                "verbose_name": "Organizer",
                "verbose_name_plural": "Organizers",
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="TouristicEventParticipantCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("label", models.CharField(max_length=255, verbose_name="Label")),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="Display order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Participant category",
                "verbose_name_plural": "Participant categories",
                "ordering": ["order", "label"],
            },
        ),
        migrations.CreateModel(
            name="TouristicEventPlace",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("name", models.CharField(max_length=256)),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=settings.SRID)),
            ],
            options={
                "verbose_name": "Event place",
                "verbose_name_plural": "Event places",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TouristicEventType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("type", models.CharField(max_length=128, verbose_name="Type")),
            ],
            options={
                "verbose_name": "Touristic event type",
                "verbose_name_plural": "Touristic event types",
                "ordering": ["type"],
            },
        ),
        migrations.CreateModel(
            name="TouristicEventParticipantCount",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "count",
                    models.PositiveIntegerField(verbose_name="Number of participants"),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="participants",
                        to="tourism.touristiceventparticipantcategory",
                        verbose_name="Category",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="tourism.touristicevent",
                        verbose_name="Touristic event",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="touristicevent",
            name="organizers",
            field=models.ManyToManyField(
                blank=True,
                related_name="touristicevent",
                to="tourism.TouristicEventOrganizer",
                verbose_name="Organizers",
            ),
        ),
        migrations.AddField(
            model_name="touristicevent",
            name="place",
            field=models.ForeignKey(
                blank=True,
                help_text="Select a place in the list or locate the event directly on the map",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="touristicevents",
                to="tourism.touristiceventplace",
                verbose_name="Event place",
            ),
        ),
        migrations.AddField(
            model_name="touristicevent",
            name="portal",
            field=models.ManyToManyField(
                blank=True,
                related_name="touristicevents",
                to="common.TargetPortal",
                verbose_name="Portal",
            ),
        ),
        migrations.AddField(
            model_name="touristicevent",
            name="source",
            field=models.ManyToManyField(
                blank=True,
                related_name="touristicevents",
                to="common.RecordSource",
                verbose_name="Source",
            ),
        ),
        migrations.AddField(
            model_name="touristicevent",
            name="structure",
            field=models.ForeignKey(
                default=geotrek.authent.models.default_structure_pk,
                on_delete=django.db.models.deletion.PROTECT,
                to="authent.structure",
                verbose_name="Related structure",
            ),
        ),
        migrations.AddField(
            model_name="touristicevent",
            name="themes",
            field=models.ManyToManyField(
                blank=True,
                help_text="Main theme(s)",
                related_name="touristic_events",
                to="common.Theme",
                verbose_name="Themes",
            ),
        ),
        migrations.AddField(
            model_name="touristicevent",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="tourism.touristiceventtype",
                verbose_name="Type",
            ),
        ),
        migrations.CreateModel(
            name="TouristicContentType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("label", models.CharField(max_length=128, verbose_name="Label")),
                ("in_list", models.IntegerField(choices=[(1, "First"), (2, "Second")])),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="types",
                        to="tourism.touristiccontentcategory",
                        verbose_name="Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Touristic content type",
                "verbose_name_plural": "Touristic content type",
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="InformationDesk",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "eid",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="External id",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=1024,
                        verbose_name="Provider",
                    ),
                ),
                ("name", models.CharField(max_length=256, verbose_name="Title")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Brief description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True, max_length=32, null=True, verbose_name="Phone"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=256, null=True, verbose_name="Email"
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True, max_length=256, null=True, verbose_name="Website"
                    ),
                ),
                (
                    "photo",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Photo",
                    ),
                ),
                (
                    "street",
                    models.CharField(
                        blank=True, max_length=256, null=True, verbose_name="Street"
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, max_length=8, null=True, verbose_name="Postal code"
                    ),
                ),
                (
                    "municipality",
                    models.CharField(
                        blank=True,
                        max_length=256,
                        null=True,
                        verbose_name="Municipality",
                    ),
                ),
                (
                    "accessibility",
                    models.TextField(blank=True, verbose_name="Accessibility"),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True,
                        null=True,
                        spatial_index=False,
                        srid=settings.SRID,
                        verbose_name="Emplacement",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "label_accessibility",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="desks",
                        to="tourism.labelaccessibility",
                        verbose_name="Label accessibility",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="desks",
                        to="tourism.informationdesktype",
                        verbose_name="Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Information desk",
                "verbose_name_plural": "Information desks",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TouristicContentType1",
            fields=[],
            options={
                "verbose_name": "Type1",
                "verbose_name_plural": "First list types",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("tourism.touristiccontenttype",),
        ),
        migrations.CreateModel(
            name="TouristicContentType2",
            fields=[],
            options={
                "verbose_name": "Type2",
                "verbose_name_plural": "Second list types",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("tourism.touristiccontenttype",),
        ),
        migrations.CreateModel(
            name="TouristicContent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "deleted",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Deleted"
                    ),
                ),
                (
                    "published",
                    models.BooleanField(
                        default=False,
                        help_text="Visible on Geotrek-rando",
                        verbose_name="Published",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="Publication date",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Public name (Change carefully)",
                        max_length=128,
                        verbose_name="Name",
                    ),
                ),
                (
                    "review",
                    models.BooleanField(
                        default=False, verbose_name="Waiting for publication"
                    ),
                ),
                (
                    "description_teaser",
                    models.TextField(
                        blank=True,
                        help_text="A brief summary",
                        verbose_name="Description teaser",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Complete description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.GeometryField(
                        srid=2154, verbose_name="Location"
                    ),
                ),
                (
                    "contact",
                    models.TextField(
                        blank=True,
                        help_text="Address, phone, etc.",
                        verbose_name="Contact",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=256, null=True, verbose_name="Email"
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True, max_length=256, null=True, verbose_name="Website"
                    ),
                ),
                (
                    "practical_info",
                    models.TextField(
                        blank=True,
                        help_text="Anything worth to know",
                        verbose_name="Practical info",
                    ),
                ),
                (
                    "accessibility",
                    models.TextField(blank=True, verbose_name="Accessibility"),
                ),
                (
                    "eid",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="External id",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=1024,
                        verbose_name="Provider",
                    ),
                ),
                (
                    "reservation_id",
                    models.CharField(
                        blank=True, max_length=1024, verbose_name="Reservation ID"
                    ),
                ),
                (
                    "approved",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates whether the content has a label or brand",
                        verbose_name="Approved",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="contents",
                        to="tourism.touristiccontentcategory",
                        verbose_name="Category",
                    ),
                ),
                (
                    "label_accessibility",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="contents",
                        to="tourism.labelaccessibility",
                        verbose_name="Label accessibility",
                    ),
                ),
                (
                    "portal",
                    models.ManyToManyField(
                        blank=True,
                        related_name="touristiccontents",
                        to="common.TargetPortal",
                        verbose_name="Portal",
                    ),
                ),
                (
                    "reservation_system",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="common.reservationsystem",
                        verbose_name="Reservation system",
                    ),
                ),
                (
                    "source",
                    models.ManyToManyField(
                        blank=True,
                        related_name="touristiccontents",
                        to="common.RecordSource",
                        verbose_name="Source",
                    ),
                ),
                (
                    "structure",
                    models.ForeignKey(
                        default=geotrek.authent.models.default_structure_pk,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="authent.structure",
                        verbose_name="Related structure",
                    ),
                ),
                (
                    "themes",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Main theme(s)",
                        related_name="touristiccontents",
                        to="common.Theme",
                        verbose_name="Themes",
                    ),
                ),
                (
                    "type1",
                    models.ManyToManyField(
                        blank=True,
                        related_name="contents1",
                        to="tourism.TouristicContentType1",
                        verbose_name="Type 1",
                    ),
                ),
                (
                    "type2",
                    models.ManyToManyField(
                        blank=True,
                        related_name="contents2",
                        to="tourism.TouristicContentType2",
                        verbose_name="Type 2",
                    ),
                ),
            ],
            options={
                "verbose_name": "Touristic content",
                "verbose_name_plural": "Touristic contents",
            },
            bases=(
                geotrek.zoning.mixins.ZoningPropertiesMixin,
                geotrek.common.mixins.models.AddPropertyMixin,
                mapentity.models.DuplicateMixin,
                geotrek.common.mixins.models.PicturesMixin,
                models.Model,
            ),
        ),
        migrations.AddIndex(
            model_name="informationdesk",
            index=django.contrib.postgres.indexes.GistIndex(
                fields=["geom"], name="informationdesk_geom_gist_idx"
            ),
        ),
    ]
