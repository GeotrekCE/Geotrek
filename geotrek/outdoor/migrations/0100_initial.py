# Generated by Django 3.2.24 on 2024-03-08 11:23

import colorfield.fields
import django.contrib.gis.db.models.fields
import django.contrib.postgres.indexes
import django.core.validators
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import geotrek.authent.models
import geotrek.common.mixins.models
import geotrek.outdoor.mixins
import geotrek.zoning.mixins
import mapentity.models
import mptt.fields
import uuid


class Migration(migrations.Migration):
    replaces = [
        ("outdoor", "0001_initial"),
        ("outdoor", "0002_practice_sitepractice"),
        ("outdoor", "0003_auto_20201214_1408"),
        ("outdoor", "0004_auto_20201216_0940"),
        ("outdoor", "0005_auto_20201217_0940"),
        ("outdoor", "0006_auto_20201217_1545"),
        ("outdoor", "0007_site_parent"),
        ("outdoor", "0008_auto_20201218_0915"),
        ("outdoor", "0009_auto_20201218_1033"),
        ("outdoor", "0010_rebuild_site_tree"),
        ("outdoor", "0011_auto_20210106_2046"),
        ("outdoor", "0012_auto_20210122_1029"),
        ("outdoor", "0013_auto_20210122_1031"),
        ("outdoor", "0014_auto_20210122_1413"),
        ("outdoor", "0015_auto_20210122_1531"),
        ("outdoor", "0016_auto_20210125_0726"),
        ("outdoor", "0017_course"),
        ("outdoor", "0018_auto_20210311_0940"),
        ("outdoor", "0019_auto_20210311_1101"),
        ("outdoor", "0020_auto_20210315_1512"),
        ("outdoor", "0021_auto_20210315_1528"),
        ("outdoor", "0022_orderedcoursechild"),
        ("outdoor", "0023_site_managers"),
        ("outdoor", "0024_auto_20210910_1002"),
        ("outdoor", "0025_merge_ratings_min_max"),
        ("outdoor", "0026_auto_20210915_1346"),
        ("outdoor", "0027_merge_ratings"),
        ("outdoor", "0028_remove_site_ratings_min"),
        ("outdoor", "0029_course_pois_excluded"),
        ("outdoor", "0030_auto_20211004_0935"),
        ("outdoor", "0031_course_parent_sites"),
        ("outdoor", "0032_course_points_reference"),
        ("outdoor", "0033_auto_20211022_1251"),
        ("outdoor", "0034_auto_20211022_1255"),
        ("outdoor", "0035_auto_20211022_1255"),
        ("outdoor", "0036_auto_20220127_1013"),
        ("outdoor", "0037_course_accessibility"),
        ("outdoor", "0038_site_accessibility"),
        ("outdoor", "0039_auto_20220304_1442"),
        ("outdoor", "0040_auto_20220909_1327"),
        ("outdoor", "0041_auto_20221110_1128"),
        ("outdoor", "0042_flatten_geometrycollection"),
        ("outdoor", "0043_auto_20230407_0943"),
        ("outdoor", "0044_alter_practice_sector"),
        ("outdoor", "0045_alter_rating_color"),
    ]
    initial = True

    dependencies = [
        ("common", "0100_initial"),
        ("authent", "0100_initial"),
        ("tourism", "0100_initial"),
        ("trekking", "0100_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "published",
                    models.BooleanField(
                        default=False,
                        help_text="Visible on Geotrek-rando",
                        verbose_name="Published",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="Publication date",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Public name (Change carefully)",
                        max_length=128,
                        verbose_name="Name",
                    ),
                ),
                (
                    "review",
                    models.BooleanField(
                        default=False, verbose_name="Waiting for publication"
                    ),
                ),
                (
                    "geom_3d",
                    django.contrib.gis.db.models.fields.GeometryField(
                        default=None,
                        dim=3,
                        editable=False,
                        null=True,
                        spatial_index=False,
                        srid=settings.SRID,
                    ),
                ),
                (
                    "length",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        editable=False,
                        null=True,
                        verbose_name="3D Length",
                    ),
                ),
                (
                    "ascent",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        editable=False,
                        null=True,
                        verbose_name="Ascent",
                    ),
                ),
                (
                    "descent",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        editable=False,
                        null=True,
                        verbose_name="Descent",
                    ),
                ),
                (
                    "min_elevation",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        editable=False,
                        null=True,
                        verbose_name="Minimum elevation",
                    ),
                ),
                (
                    "max_elevation",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        editable=False,
                        null=True,
                        verbose_name="Maximum elevation",
                    ),
                ),
                (
                    "slope",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        editable=False,
                        null=True,
                        verbose_name="Slope",
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.GeometryCollectionField(
                        srid=settings.SRID, verbose_name="Location"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Complete description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "ratings_description",
                    models.TextField(blank=True, verbose_name="Ratings description"),
                ),
                ("gear", models.TextField(blank=True, verbose_name="Gear")),
                (
                    "duration",
                    models.FloatField(
                        blank=True,
                        help_text="In hours (1.5 = 1 h 30, 24 = 1 day, 48 = 2 days)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Duration",
                    ),
                ),
                (
                    "advice",
                    models.TextField(
                        blank=True,
                        help_text="Risks, danger, best period, ...",
                        verbose_name="Advice",
                    ),
                ),
                (
                    "accessibility",
                    models.TextField(blank=True, verbose_name="Accessibility"),
                ),
                ("equipment", models.TextField(blank=True, verbose_name="Equipment")),
                (
                    "height",
                    models.IntegerField(blank=True, null=True, verbose_name="Height"),
                ),
                (
                    "eid",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="External id",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=1024,
                        verbose_name="Provider",
                    ),
                ),
                (
                    "points_reference",
                    django.contrib.gis.db.models.fields.MultiPointField(
                        blank=True,
                        null=True,
                        spatial_index=False,
                        srid=settings.SRID,
                        verbose_name="Points of reference",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
            ],
            options={
                "verbose_name": "Outdoor course",
                "verbose_name_plural": "Outdoor courses",
                "ordering": ("name",),
            },
            bases=(
                geotrek.zoning.mixins.ZoningPropertiesMixin,
                geotrek.common.mixins.models.AddPropertyMixin,
                mapentity.models.DuplicateMixin,
                geotrek.common.mixins.models.PicturesMixin,
                models.Model,
                geotrek.outdoor.mixins.ExcludedPOIsMixin,
            ),
        ),
        migrations.CreateModel(
            name="Practice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Practice",
                "verbose_name_plural": "Practices",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Rating",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "pictogram",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="upload",
                        verbose_name="Pictogram",
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "order",
                    models.IntegerField(
                        blank=True,
                        help_text="Alphabetical order if blank",
                        null=True,
                        verbose_name="Order",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        blank=True,
                        default="",
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="Color",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rating",
                "verbose_name_plural": "Ratings",
                "ordering": ("order", "name"),
            },
        ),
        migrations.CreateModel(
            name="Sector",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Sector",
                "verbose_name_plural": "Sectors",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="SiteType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "practice",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="site_types",
                        to="outdoor.practice",
                        verbose_name="Practice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Site type",
                "verbose_name_plural": "Site types",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                (
                    "published",
                    models.BooleanField(
                        default=False,
                        help_text="Visible on Geotrek-rando",
                        verbose_name="Published",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="Publication date",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Public name (Change carefully)",
                        max_length=128,
                        verbose_name="Name",
                    ),
                ),
                (
                    "review",
                    models.BooleanField(
                        default=False, verbose_name="Waiting for publication"
                    ),
                ),
                (
                    "geom_3d",
                    django.contrib.gis.db.models.fields.GeometryField(
                        default=None,
                        dim=3,
                        editable=False,
                        null=True,
                        spatial_index=False,
                        srid=settings.SRID,
                    ),
                ),
                (
                    "length",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        editable=False,
                        null=True,
                        verbose_name="3D Length",
                    ),
                ),
                (
                    "ascent",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        editable=False,
                        null=True,
                        verbose_name="Ascent",
                    ),
                ),
                (
                    "descent",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        editable=False,
                        null=True,
                        verbose_name="Descent",
                    ),
                ),
                (
                    "min_elevation",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        editable=False,
                        null=True,
                        verbose_name="Minimum elevation",
                    ),
                ),
                (
                    "max_elevation",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        editable=False,
                        null=True,
                        verbose_name="Maximum elevation",
                    ),
                ),
                (
                    "slope",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        editable=False,
                        null=True,
                        verbose_name="Slope",
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.GeometryCollectionField(
                        srid=settings.SRID, verbose_name="Location"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Complete description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "description_teaser",
                    models.TextField(
                        blank=True,
                        help_text="A brief summary (map pop-ups)",
                        verbose_name="Description teaser",
                    ),
                ),
                (
                    "ambiance",
                    models.TextField(
                        blank=True,
                        help_text="Main attraction and interest",
                        verbose_name="Ambiance",
                    ),
                ),
                (
                    "advice",
                    models.TextField(
                        blank=True,
                        help_text="Risks, danger, best period, ...",
                        verbose_name="Advice",
                    ),
                ),
                (
                    "period",
                    models.CharField(
                        blank=True, max_length=1024, verbose_name="Period"
                    ),
                ),
                (
                    "orientation",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Orientation"
                    ),
                ),
                (
                    "wind",
                    models.JSONField(blank=True, default=list, verbose_name="Wind"),
                ),
                (
                    "accessibility",
                    models.TextField(blank=True, verbose_name="Accessibility"),
                ),
                (
                    "eid",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="External id",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=1024,
                        verbose_name="Provider",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "information_desks",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Where to obtain information",
                        related_name="sites",
                        to="tourism.InformationDesk",
                        verbose_name="Information desks",
                    ),
                ),
                (
                    "labels",
                    models.ManyToManyField(
                        blank=True,
                        related_name="sites",
                        to="common.Label",
                        verbose_name="Labels",
                    ),
                ),
                (
                    "managers",
                    models.ManyToManyField(
                        blank=True, to="common.Organism", verbose_name="Managers"
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="children",
                        to="outdoor.site",
                        verbose_name="Parent",
                    ),
                ),
                (
                    "pois_excluded",
                    models.ManyToManyField(
                        blank=True,
                        related_name="excluded_sites",
                        to="trekking.POI",
                        verbose_name="Excluded POIs",
                    ),
                ),
                (
                    "portal",
                    models.ManyToManyField(
                        blank=True,
                        related_name="sites",
                        to="common.TargetPortal",
                        verbose_name="Portal",
                    ),
                ),
                (
                    "practice",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sites",
                        to="outdoor.practice",
                        verbose_name="Practice",
                    ),
                ),
                (
                    "ratings",
                    models.ManyToManyField(
                        blank=True,
                        related_name="sites",
                        to="outdoor.Rating",
                        verbose_name="Ratings",
                    ),
                ),
                (
                    "source",
                    models.ManyToManyField(
                        blank=True,
                        related_name="sites",
                        to="common.RecordSource",
                        verbose_name="Source",
                    ),
                ),
                (
                    "structure",
                    models.ForeignKey(
                        default=geotrek.authent.models.default_structure_pk,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="authent.structure",
                        verbose_name="Related structure",
                    ),
                ),
                (
                    "themes",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Main theme(s)",
                        related_name="sites",
                        to="common.Theme",
                        verbose_name="Themes",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sites",
                        to="outdoor.sitetype",
                        verbose_name="Type",
                    ),
                ),
                (
                    "web_links",
                    models.ManyToManyField(
                        blank=True,
                        help_text="External resources",
                        related_name="sites",
                        to="trekking.WebLink",
                        verbose_name="Web links",
                    ),
                ),
            ],
            options={
                "verbose_name": "Outdoor site",
                "verbose_name_plural": "Outdoor sites",
                "ordering": ("name",),
            },
            bases=(
                geotrek.zoning.mixins.ZoningPropertiesMixin,
                geotrek.common.mixins.models.AddPropertyMixin,
                geotrek.common.mixins.models.PicturesMixin,
                mapentity.models.DuplicateMixin,
                models.Model,
                geotrek.outdoor.mixins.ExcludedPOIsMixin,
            ),
        ),
        migrations.CreateModel(
            name="RatingScale",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "order",
                    models.IntegerField(
                        blank=True,
                        help_text="Within a practice. Alphabetical order if blank",
                        null=True,
                        verbose_name="Order",
                    ),
                ),
                (
                    "practice",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rating_scales",
                        to="outdoor.practice",
                        verbose_name="Practice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rating scale",
                "verbose_name_plural": "Rating scales",
                "ordering": ("practice", "order", "name"),
            },
        ),
        migrations.AddField(
            model_name="rating",
            name="scale",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ratings",
                to="outdoor.ratingscale",
                verbose_name="Scale",
            ),
        ),
        migrations.AddField(
            model_name="practice",
            name="sector",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="practices",
                to="outdoor.sector",
                verbose_name="Sector",
            ),
        ),
        migrations.CreateModel(
            name="OrderedCourseChild",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "child",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_parents",
                        to="outdoor.course",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_children",
                        to="outdoor.course",
                    ),
                ),
            ],
            options={
                "ordering": ("parent__id", "order"),
            },
        ),
        migrations.CreateModel(
            name="CourseType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_insert",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Insertion date"
                    ),
                ),
                (
                    "date_update",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="Update date"
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "practice",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_types",
                        to="outdoor.practice",
                        verbose_name="Practice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Course type",
                "verbose_name_plural": "Course types",
                "ordering": ("name",),
            },
        ),
        migrations.AddField(
            model_name="course",
            name="parent_sites",
            field=models.ManyToManyField(
                related_name="children_courses", to="outdoor.Site", verbose_name="Sites"
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="pois_excluded",
            field=models.ManyToManyField(
                blank=True,
                related_name="excluded_courses",
                to="trekking.POI",
                verbose_name="Excluded POIs",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="ratings",
            field=models.ManyToManyField(
                blank=True,
                related_name="courses",
                to="outdoor.Rating",
                verbose_name="Ratings",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="structure",
            field=models.ForeignKey(
                default=geotrek.authent.models.default_structure_pk,
                on_delete=django.db.models.deletion.PROTECT,
                to="authent.structure",
                verbose_name="Related structure",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="courses",
                to="outdoor.coursetype",
                verbose_name="Type",
            ),
        ),
        migrations.AddIndex(
            model_name="site",
            index=django.contrib.postgres.indexes.GistIndex(
                fields=["geom_3d"], name="site_geom_3d_gist_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="orderedcoursechild",
            unique_together={("parent", "child")},
        ),
        migrations.AddIndex(
            model_name="course",
            index=django.contrib.postgres.indexes.GistIndex(
                fields=["points_reference"], name="course_points_ref_gist_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="course",
            index=django.contrib.postgres.indexes.GistIndex(
                fields=["geom_3d"], name="course_geom_3d_gist_idx"
            ),
        ),
    ]
