# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test CI

on:
  pull_request:
  push:
    branches:
      - master
  release:
    types:
      - created
env:
  DEBIAN_FRONTEND: noninteractive
  POSTGRES_DB: ci_test
  POSTGRES_PASSWORD: ci_test
  POSTGRES_USER: ci_test
  POSTGRES_HOST: 127.0.0.1
  SERVER_NAME: localhost
  SECRET_KEY: test-test-test
  CONVERSION_HOST: localhost
  CAPTURE_HOST: localhost
  REDIS_HOST: 127.0.0.1
  VAR_DIR: /home/runner/work/Geotrek-admin/Geotrek-admin/var

jobs:
  test:
    name: Python Unittests
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: ['3.6', '3.8']  # should match default versions in supported LTS (now 3.6 for 18.04 and 3.8 for 20.04)
        tests-env: ['tests', 'tests_nds']

    env:
      ENV: ${{ matrix.tests-env }}

    services:
      postgres:
        image: postgis/postgis:10-2.5
        env:
          POSTGRES_DB: ci_test
          POSTGRES_PASSWORD: ci_test
          POSTGRES_USER: ci_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
      redis:
        image: redis:5.0-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.lib/

        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install System dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get -qq -y install \
             unzip \
             gettext \
             binutils \
             libproj-dev \
             gdal-bin \
             sudo \
             less \
             curl \
             git \
             iproute2 \
             software-properties-common \
             shared-mime-info \
             fonts-liberation \
             libssl-dev \
             libfreetype6-dev \
             libxml2-dev \
             libxslt-dev \
             libcairo2 \
             libpango1.0-0 \
             libpangocairo-1.0-0 \
             libgdk-pixbuf2.0-dev \
             libffi-dev
        sudo apt-get install -y --no-install-recommends postgis

    - name: Install python dependecies
      run: |
        python3 -m pip install --upgrade pip setuptools wheel
        pip3 install -r requirements.txt -U

    - name: Check migrations
      run: |
        python3 ./manage.py makemigrations --check

    - name: Prepare environment
      run: |
        mkdir -p $VAR_DIR
        mkdir -p $VAR_DIR/conf/extra_static
        python3 ./manage.py collectstatic --clear --noinput --verbosity=0
        python3 ./manage.py compilemessages

    - name: Launch Celery
      run: |
        celery -A geotrek worker -c 1 &

    - name: Unit test
      run: |
        coverage run ./manage.py test -v 3

#    - name: Coverage upload
#      run: |
#        pip install codecov
#        cd src
#        codecov

#  build_docker_image:
#    name: Build docker image
#    runs-on: ubuntu-20.04
#    needs: [test]
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#      - name: Build Docker image
#        run: |
#          docker build -t screamshotter_ci:latest .
#      - name: Upload image
#        uses: ishworkh/docker-image-artifact-upload@v1
#        with:
#          image: "screamshotter_ci:latest"
#  build_deb_18_04:
#    name: Build 18.04 package
#    runs-on: ubuntu-latest
#    container: ubuntu:bionic
#    env:
#      LANG: C.UTF-8
#    needs: [test]
#    steps:
#      - uses: actions/checkout@v2
#      - name: Prepare debian 18.04 versioning
#        run: |
#          sed -i 's/+dev/.ubuntu18.04~dev'$GITHUB_RUN_ID'/' debian/changelog
#          sed -i 's/screamshotter (\([0-9]\+\.[0-9]\+\.[0-9]\+\)\(.*\)) RELEASED;/screamshotter (\1.ubuntu18.04\2) bionic;/' debian/changelog
#      - name: Install build dependencies
#        run: |
#          apt-get update -q
#          apt-get install -q -y dpkg-dev debhelper dh-virtualenv git python3 python3-venv python3-dev libgtk-3-0 libasound2 libgbm1 libxshmfence1
#      - name: Building package debian 18.04
#        run: |
#          dpkg-buildpackage -uc -us -b
#      - name: Archive package artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: debian-18-04
#          path: |
#            /home/runner/work/screamshotter/*.deb
#
#  build_deb_20_04:
#    name: Build 20.04 package
#    runs-on: ubuntu-latest
#    container: ubuntu:focal
#    needs: [test]
#    env:
#      LANG: C.UTF-8
#    steps:
#      - uses: actions/checkout@v2
#      - name: Prepare debian 20.04 versioning
#        run: |
#          sed -i 's/+dev/.ubuntu20.04~dev'$GITHUB_RUN_ID'/' debian/changelog
#          sed -i 's/screamshotter (\([0-9]\+\.[0-9]\+\.[0-9]\+\)\(.*\)) RELEASED;/screamshotter (\1.ubuntu20.04\2) focal;/' debian/changelog
#      - name: Install build dependencies
#        run: |
#          apt-get update -q
#          apt-get install -q -y software-properties-common
#          add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
#          apt-get install -q -y dpkg-dev debhelper dh-virtualenv git python3 python3-venv python3-dev libgtk-3-0 libasound2 libgbm1 libxshmfence1
#      - name: Building package debian 20.04
#        run: |
#          dpkg-buildpackage -uc -us -b
#      - name: Archive package artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: debian-20-04
#          path: |
#            /home/runner/work/screamshotter/*.deb
#
#  e2e_docker_image:
#    name: Tests E2E docker
#    runs-on: ubuntu-20.04
#    needs: [build_docker_image]
#    steps:
#      - name: Download image
#        uses: ishworkh/docker-image-artifact-download@v1
#        with:
#          image: "screamshotter_ci:latest"
#      - name: Launch service
#        run: |
#          docker run -d -p 8000:8000 screamshotter_ci:latest
#          echo "Waiting for container..."
#          while ! nc -z "127.0.0.1" "8000"; do
#            sleep 0.1
#          done
#      - name: E2E test
#        run: |
#          sleep 2
#          curl -d url=https://google.com http://localhost:8000 > google.png
#          if file google.png |grep -qE 'image|png'; then
#            echo "File is PNG";
#            exit 0;
#          else
#            echo "File is not PNG";
#            exit 1;
#          fi
#  e2e_deb_18_04:
#    name: Tests E2E 18.04
#    runs-on: ubuntu-18.04
#    needs: [ build_deb_18_04 ]
#    steps:
#      - uses: actions/download-artifact@v2
#        with:
#          name: debian-18-04
#      - name: Install package
#        run: |
#          sudo dpkg -i /home/runner/work/screamshotter/screamshotter/*.deb || exit 0;
#      - name: Fix dependencies
#        run: |
#          sudo apt-get install -f -y
#      - name: E2E test
#        run: |
#          curl -d url=https://google.com http://localhost:8000 > google.png
#          if file google.png |grep -qE 'image|png'; then
#            echo "File is PNG";
#            exit 0;
#          else
#            echo "File is not PNG";
#            exit 1;
#          fi
#
#  e2e_deb_20_04:
#    name: Tests E2E 20.04
#    runs-on: ubuntu-20.04
#    needs: [ build_deb_20_04 ]
#    steps:
#      - uses: actions/download-artifact@v2
#        with:
#          name: debian-20-04
#      - name: Install package
#        run: |
#          sudo dpkg -i /home/runner/work/screamshotter/screamshotter/*.deb || exit 0;
#      - name: Fix dependencies
#        run: |
#          sudo apt-get install -f -y
#      - name: E2E test
#        run: |
#          curl -d url=https://google.com http://localhost:8000 > google.png
#          if file google.png |grep -qE 'image|png'; then
#            echo "File is PNG";
#            exit 0;
#          else
#            echo "File is not PNG";
#            exit 1;
#          fi
#  deploy:
#    name: Publish (on release only)
#    runs-on: ubuntu-18.04
#    needs: [ e2e_docker_image, e2e_deb_18_04, e2e_deb_20_04 ]
#    if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
#    steps:
#      - name: Download 18.04 debian artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: debian-18-04
#      - name: Download 20.04 debian artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: debian-20-04
#      - name: Download docker image
#        uses: ishworkh/docker-image-artifact-download@v1
#        with:
#          image: "screamshotter_ci:latest"
#      - name: Attach debian packages as release binaries
#        uses: skx/github-action-publish-binaries@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          args: '*.deb'
#      - name: Login to Docker Hub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKER_LOGIN }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Publish Docker image (v2 and latest)
#        run: |
#          docker tag screamshotter_ci:latest makinacorpus/screamshotter:v2
#          docker push makinacorpus/screamshotter:v2
#          docker tag screamshotter_ci:latest makinacorpus/screamshotter:latest
#          docker push makinacorpus/screamshotter:latest
#      - name: Install SSH key
#        uses: shimataro/ssh-key-action@v2
#        with:
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
#      - name: Publish debian packages
#        run: |
#          if [[ "${{ github.ref }}" == *"dev"* ]]; then
#            export DEB_COMPONENT=dev
#          else
#            export DEB_COMPONENT=main
#          fi
#          echo "${{ github.ref }} : Publishing as $DEB_COMPONENT package"
#          scp -P ${{ secrets.SSH_PORT }} /home/runner/work/screamshotter/screamshotter/screamshotter_*_amd64.deb ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/srv/packages/incoming/$DEB_COMPONENT/
#          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} make -C /srv/packages
